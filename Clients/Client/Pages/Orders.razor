@page "/orders/"
@page "/orders/{parameter}"
@using NotatnikMechanika.Core.PageModels
@using MVVMPackage.Blazor
@using NotatnikMechanika.Shared.Models.Order
@inherits PageBase<OrdersPageModel>


@if (PageModel.IsLoading)
{
    <MBCircularProgress class="circular-progress" CircularProgressType="@MBCircularProgressType.Indeterminate" />
}
else
{
    <MBFloatingActionButton class="app-fab--absolute" Icon="add" @onclick="@(e => PageModel.AddOrderCommand.Execute(null))" />

    <Virtualize Context="order" Items="@PageModel.Orders">
        <div class="mdc-layout-grid__cell">
            <MBCard AutoStyled="true">
                <Primary>
                    <p>
                        @order.CustomerModel.Name
                        @order.CustomerModel.Surname
                    </p>
                    <p>@order.CarModel.Brand @order.CarModel.Model</p>
                    <p>@order.CustomerModel.Phone</p>
                    <p><MBDivider/></p>
                    <p>Postęp: @((int)(order.Proggress * 100))%</p>                      
                    <p><MBLinearProgress LinearProgressType="MBLinearProgressType.Determinate" Value="@order.Proggress" /></p>                         
                    <p>@( DateTime.Now < order.FinishDate ? $"Do końca: {(order.FinishDate - DateTime.Now).TotalDays} dni" : "Czas się skończył!!")</p>                           
                    <p><MBDivider/></p>
                    <p>
                        <MBIconButton Icon="info" @onclick="_ => PageModel.OrderSelectedCommand.Execute(order.Id)" />
                        <MBIconButton Icon="info" @onclick="_ => PageModel.OrderSelectedCommand.Execute(order.Id)" />
                        <MBIconButton Icon="delete" @onclick="_ => PageModel.RemoveOrderCommand.Execute(order.Id)" />
                    </p>
                </Primary>
            </MBCard>         
        </div>
    </Virtualize>
}


